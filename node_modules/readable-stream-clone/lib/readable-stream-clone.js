"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promisifyWriteStream = exports.promisifyWriteStreams = exports.ReadableStreamClone = void 0;
const stream_1 = require("stream");
class ReadableStreamClone extends stream_1.Readable {
    constructor(readableStream, options) {
        super(options);
        readableStream.on("data", (chunk) => {
            this.push(chunk);
        });
        readableStream.on('end', () => {
            this.push(null);
        });
        readableStream.on("error", (err) => {
            this.emit("error", err);
        });
    }
    _read() { }
}
exports.ReadableStreamClone = ReadableStreamClone;
const promisifyWriteStreams = (writableStreams) => __awaiter(void 0, void 0, void 0, function* () {
    return Promise.all(writableStreams.map((writable) => {
        return (0, exports.promisifyWriteStream)(writable);
    }));
});
exports.promisifyWriteStreams = promisifyWriteStreams;
const promisifyWriteStream = (writableStream) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        writableStream.on('finish', () => {
            resolve(null);
        });
        writableStream.on('error', (err) => {
            reject(err);
        });
    });
});
exports.promisifyWriteStream = promisifyWriteStream;
exports.default = ReadableStreamClone;
// NodeJS support
module.exports.default = ReadableStreamClone;
//# sourceMappingURL=readable-stream-clone.js.map