/// <reference types="node" />
import { Transform, TransformOptions, TransformCallback } from 'stream';
import { EbmlTag } from './models/EbmlTag';
import { EbmlMasterTag } from './models/tags/EbmlMasterTag';
export declare class EbmlStreamEncoder extends Transform {
    private dataBuffer;
    private mCorked;
    private openTags;
    constructor(options?: TransformOptions);
    _transform(chunk: EbmlTag, enc: string, done: TransformCallback): void;
    bufferAndFlush(buffer: Buffer): void;
    _flush(callback: TransformCallback): void;
    _bufferAndFlush(buffer: Buffer): void;
    flush(): void;
    buffer: Buffer;
    readonly stack: EbmlMasterTag[];
    cork(): void;
    uncork(): void;
    writeTag(tag: EbmlTag): void;
    startTag(tag: EbmlMasterTag): void;
    endTag(tag: EbmlMasterTag): void;
}
